---
title: "Estimating pinfish growth rates"
author: "Matheus de Barros"
format: html
editor: visual
---

## Introduction

This is a step-by-step script to document the estimation of pinfish daily growth rates using length-at-age information.

Growth rates are estimated by a Bayesian linear mixed model, with a single fixed intercept and random slopes for each k-th site as follows:

$$TL = \alpha + GR_{k}*age$$

$$GR_{k}\sim normal(\mu_{GR}, \sigma) $$

$$\alpha \sim normal(\mu_{\alpha}, \sigma)$$

$$\sigma \sim half cauchy(0,1)$$

## Running Code

```{r}
# LOADING DATA
library(readr)
OM <- read_csv("OM_LAGRHO.csv", skip = 0)
head(OM)
library(dplyr)
OM <- OM %>% filter(Site %in% c("NEPaP", "SA", "AM", "DR", "LB")) 
  
# WRANGLING DATA
OM <- as.data.frame(OM)
TL <- OM$`TL (mm)`
age <- OM$`Final count`
site <- as.numeric(as.factor(OM$Site))

stan_df <- data.frame(TL, age, site)
stan_df <- na.exclude(stan_df) # exclude un-aged fish

datalist <- list(N_obs = dim(stan_df)[1], N_sites = length(unique(stan_df$site)),
                 TL = stan_df$TL, age = stan_df$age, site = stan_df$site)
```

## Writing stan code

```{r}

write("data {

int<lower=0> N_obs;         // number of observations
int<lower=0> N_sites;       // number of sites
int<lower=1> site[N_obs];   // variable for random effects
real age [N_obs];           // predictor variable
real TL [N_obs];            // response variable

}

parameters {

real<lower=0>alpha;                 // population intercept, fixed
real beta_site[N_sites];            // random slopes
real<lower=0> sigma_rd[N_sites];    // random slope SDs
real<lower=0> sigma_alpha;          // SD for fixed intercept
real<lower=0> sigma;                // observation SD

}

transformed parameters  {

real mu[N_obs];

for (i in 1:N_obs) {
   
  mu[i] = alpha + beta_site[site[i]]*age[i];

}

}
 
model {

alpha ~ normal(5, sigma_alpha);
sigma_alpha ~ cauchy(0,1);
beta_site ~ normal(0.5, sigma_rd);

for (i in 1:N_sites) {

  sigma_rd[i] ~ cauchy(0,1);

}

for (i in 1:N_obs) {

  TL[i] ~ normal(mu[i], sigma); // LIKELIHOOD

}

}

generated quantities {

vector[N_obs] y_hat;
vector[N_sites] diff[N_sites];

for (i in 1:N_obs) {

  y_hat[i] = alpha + beta_site[site[i]]*age[i]; // POSTERIOR PREDICTIVE 

}
  
for (k in 1:N_sites) {
  
  for (i in 1:(k-1)) {
  
    diff[i,k] = beta_site[i] - beta_site[k];
    // No of comparisons = k(k-1)/2
    // where k = No of groups
  
  }
  
}

}
",
"LMM.stan")


stanc('LMM.stan')
```

## Running model

```{r}
res <- stan(file = 'LMM.stan', data = datalist, pars = c("beta_site","diff"),
                chains = 3, iter = 20000, warmup = 2000, thin = 1)
```

## Plotting results

### 1. Assessing convergence

Those plots called MCMC traceplots, and are useful to examine the convergence of MCMC chain, that is, whether or not the independent chains in the Bayesian algorithm reach the same parameter values. At convergence, MCMC traceplots for each parameter look like hairy caterpillars (lots of overlap between chains).

```{r}
traceplot(res, pars = c("beta_site", "alpha"), inc_warmup = TRUE)
```

### 2. Plotting growth rates

```{r}
library(bayesplot)

color_scheme_set("teal")

mcmc_areas(res, pars = c("beta_site[1]", "beta_site[2]",
                         "beta_site[3]", "beta_site[4]",
                         "beta_site[5]"), prob = 0.95,
           point_est = "median") +
  scale_y_discrete(expand = c(0, 0), labels = c("beta_site[1]" = "AM-C",
                                                "beta_site[2]" = "DR-C",
                                                "beta_site[3]" = "LB-C",
                                                "beta_site[4]" = "PaP-T",
                                                "beta_site[5]" = "SA-T")) +
  xlab("Growth rate (mm/day)")
```

### 3. Pairwise comparisons 

Pairwise comparisons are often very important in hypothesis testing to analyse, for instance, if certain groups are different from each other. Under a Bayesian framework, one way of conducting pairwise comparisons is to simply take the difference of posterior distributions for each parameter pair. If the differences do not or mostly do not overlap zero, the groups can be declared different with a high degree of certainty, and declared equal otherwise.

A region of practical equivalence (ROPE) is often used as a arbitrary range where posterior distributions would still be considered to be equal. I have used here a ROPE of 0.025 mm/day, meaning any difference under this value is considered to be equal for practical purposes.

```{r}
require(ggmcmc)
require(ggplot2)
require(coda)
require(ggdist)

mcmc <- mcmc.list(lapply(1:ncol(res), function(x) mcmc(as.array(res)[,x,])))
mcmc <- ggs(mcmc)

# AM = 1, DR = 2, LB = 3, NEPaP = 4, SA = 5

MCMC_diff <- filter(mcmc, Parameter %in% c("diff[1,2]", "diff[1,3]", "diff[1,4]",
                                           "diff[1,5]", "diff[2,3]", "diff[2,4]",
                                           "diff[2,5]", "diff[3,4]", "diff[3,5]",
                                           "diff[4,5]"))

MCMC_diff <- MCMC_diff %>%
  mutate(Contrast = case_when(Parameter == "diff[1,2]" ~ 'AM-C x DR-C ',
                          Parameter == "diff[1,3]" ~ 'AM-C x LB-C',
                          Parameter == "diff[1,4]" ~ 'AM-C x PaP-T',
                          Parameter == "diff[1,5]" ~ 'AM-C x SA-T',
                          Parameter == "diff[2,3]" ~ 'DR-C x LB-C ',
                          Parameter == "diff[2,4]" ~ 'DR-C x PaP-T',
                          Parameter == "diff[2,5]" ~ 'DR-C x SA-T',
                          Parameter == "diff[3,4]" ~ 'LB-C x PaP-T',
                          Parameter == "diff[3,5]" ~ 'LB-C x SA-T',
                          Parameter == "diff[4,5]" ~ 'PaP-T x SA-T'))

ggplot(data = MCMC_diff, aes(x = Contrast,
                             y = value,
                             fill = after_stat(y>=-0.025&y<=0.025))) +
  stat_slab(color = "black") + coord_flip() + 
  theme_bw() +
  scale_fill_manual(values = c("gray85", "lightgreen"), name = "ROPE") +
  ylab("Posterior difference") 


```
